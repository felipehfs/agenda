{"version":3,"sources":["components/withNull.jsx","components/GenericTable.jsx","components/modals/ContactDialog.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","codition","GenericTable","_ref","rows","props","Object","objectWithoutProperties","react_default","a","createElement","index_es","map","row","key","id","name","email","component","onClick","e","onUpdate","aria-label","color","icons_index_es","onRemove","Delete_default","ContactDialog","_this$props","this","handleClickOpen","AddBox_default","fontSize","fullWidth","maxWidth","open","onClose","handleClose","aria-labelledby","autoFocus","margin","value","label","onChange","handleOnChange","type","handleSave","GenericTableWithNull","Date","now","length","App","state","contacts","search","_this","setState","_this$state","newContact","updatedList","objectSpread","concat","toConsumableArray","_e$target","target","defineProperty","handleUpdate","index","findIndex","el","splice","getFilteredTable","filter","RegExp","test","classes","className","container","item","xs","placeholder","modals_ContactDialog","withStyles","root","padding","alignItems","display","input","flex","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c14b25c.chunk.js","sourcesContent":["import React from 'react'\n\nexport default (Component, codition) => props => {\n    return codition(props)?  null: <Component {...props}/>\n}","import React from 'react'\nimport { Table, TableBody, TableHead, TableRow, TableCell, Icon, IconButton } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nimport { Edit } from '@material-ui/icons'\n\nconst GenericTable = ({ rows, ...props }) => {\n    return (\n        <Table>\n            <TableHead>\n                <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>E-mail</TableCell>\n                    <TableCell>Actions</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {\n                    rows.map(row => (\n                        <TableRow key={row.id}>\n                            <TableCell>{row.name}</TableCell>\n                            <TableCell>{row.email}</TableCell>\n                            <TableCell>\n                                 <IconButton component=\"span\" \n                                    onClick={e => props.onUpdate(row) }\n                                    aria-label=\"Edit\" color=\"default\">\n                                    <Edit />\n                                </IconButton>\n                                <IconButton component=\"span\" \n                                    onClick={e => props.onRemove(row.id) }\n                                    aria-label=\"Delete\" color=\"secondary\">\n                                    <DeleteIcon />\n                                </IconButton>\n                            </TableCell>\n                        </TableRow>\n                    ))\n                }\n            </TableBody>\n        </Table>\n    )\n}\n\nexport default GenericTable","import React, { Component} from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, IconButton, TextField, DialogTitle } from '@material-ui/core'\nimport AddBox from '@material-ui/icons/AddBox'\n\nclass ContactDialog extends Component {\n      render() {\n        const { name, email, id } = this.props\n        return (\n          <div>\n            <IconButton color=\"primary\" onClick={this.props.handleClickOpen}>\n              <AddBox fontSize=\"large\" />\n            </IconButton>\n            <Dialog\n              fullWidth\n              maxWidth=\"sm\"\n              open={this.props.open}\n              onClose={this.props.handleClose}\n              aria-labelledby=\"form-dialog-title\"\n            >\n              <DialogTitle id=\"form-dialog-title\">{id ? \"Editar contato\":\"Novo contato\"}</DialogTitle>\n              <DialogContent>\n              <TextField\n                  autoFocus\n                  margin=\"dense\"\n                  id=\"name\"\n                  value={this.props.name}\n                  label=\"Nome\"\n                  onChange={this.props.handleOnChange}\n                  name=\"name\"\n                  type=\"text\"\n                  fullWidth\n                />\n               \n                <TextField\n                  margin=\"dense\"\n                  id=\"email\"\n                  name=\"email\"\n                  onChange={this.props.handleOnChange}\n                  value={this.props.email}\n                  label=\"Email Address\"\n                  type=\"email\"\n                  fullWidth\n                />\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.props.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button onClick={this.props.handleSave} color=\"primary\">\n                  Save\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        );\n      }\n}\n\nexport default ContactDialog","import React, { Component } from 'react';\nimport { Grid, Button, InputBase } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles'\nimport GenericTable from './components/GenericTable'\nimport ContactDialog from './components/modals/ContactDialog'\nimport withNull from './components/withNull'\n\nimport './App.css';\n\nconst styles = {\n  root: {\n    padding: '2px 4px',\n    alignItems: 'center',\n    display: 'flex'\n  },\n  input: {\n    flex: 1,\n    marginLeft: 18\n  }\n}\n\nconst contacts = [{\n  id: Date.now(),\n  name: \"Felipe\",\n  email: \"felipehfsz@gmail.com\"\n}, {\n  id: Date.now() + 1,\n  name: \"Marcos\",\n  email: \"marcosrosa@gmail.com\"\n}]\n\nconst GenericTableWithNull = withNull(GenericTable, props => props.rows.length == 0)\n\nclass App extends Component {\n\n  state = {\n    contacts: [],\n    open: false,\n    search: '',\n    email: '',\n    name: '',\n    id: null\n  }\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n\n  handleSave = () => {\n    const { email, name, contacts, id } = this.state\n    if (!name || !email) return\n    const newContact = { open: false, email, name, id: Date.now() }\n    if (!id) {\n      this.setState({ ...this.state, open: false, email: '', name: '', id: null, contacts: [...contacts, newContact] });\n    } else {\n      const updatedList = contacts.map(row => row.id === id ? newContact : row)\n      this.setState({ ...this.state, open: false, email: '', name: '', id: null, contacts: updatedList });\n    }\n  };\n\n  handleClose = () => {\n    this.setState({\n      open: false, email: '',\n      name: '',\n      id: null\n    });\n\n  }\n  handleOnChange = e => {\n    const { name, value } = e.target\n    this.setState({ ...this.state, [name]: value })\n  }\n  handleUpdate = row => {\n    this.setState({\n      open: true,\n      email: row.email,\n      id: row.id,\n      name: row.name\n    })\n  }\n  onRemove = id => {\n    const { contacts } = this.state\n    const index = contacts.findIndex(el => el.id === id)\n    contacts.splice(index, 1)\n    this.setState({ ...this.state, contacts })\n  }\n\n  getFilteredTable = () => {\n    const { search } = this.state\n    return this.state.contacts.filter(row => new RegExp(search, 'i').test(row.name))\n  }\n  render() {\n    const { classes } = this.props\n    return (\n      <div className=\"App\">\n        <Grid container>\n          <Grid item xs={12}>\n            <InputBase placeholder=\"Digite o nome para busca\" name=\"search\" onChange={this.handleOnChange} value={this.state.search} />\n          </Grid>\n          <Grid item xs={12}>\n            <ContactDialog\n              handleSave={this.handleSave}\n              handleClickOpen={this.handleClickOpen}\n              handleOnChange={this.handleOnChange}\n              handleClose={this.handleClose}\n              open={this.state.open}\n              email={this.state.email}\n              id={this.state.id}\n              name={this.state.name} />\n          </Grid>\n          <Grid item xs={12}>\n            <GenericTableWithNull rows={this.getFilteredTable()}\n              onUpdate={this.handleUpdate}\n              onRemove={this.onRemove} />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}